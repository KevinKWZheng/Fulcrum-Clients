{"version":3,"file":"Client.js","sources":["../src/util.ts","../src/managers/user.ts","../src/managers/base/base.ts","../src/managers/conversations.ts","../src/managers/invoices.ts","../src/managers/assistants.ts","../src/processor.ts","../main.ts"],"sourcesContent":["import * as fsSync from \"fs\";\nimport { createHmac, createHash } from \"crypto\";\nimport { v4 as UUID } from \"uuid\";\nimport axios from \"axios\";\n\nexport class Logger {\n    protected cacheDir: string;\n    protected getLogFile(timestamp?: string) {\n        let time = new Date();\n        if (timestamp)\n            time = new Date(timestamp);\n        return `${this.cacheDir}/${time.getUTCFullYear()}-${time.getUTCMonth()}-${time.getUTCDate()}-${time.getUTCHours()}.log`;\n    }\n    constructor(module?: string) {\n        if (module) {\n            this.cacheDir = `logs/${module}`;\n        } else {\n            this.cacheDir = `logs/`;\n        } if (!fsSync.existsSync(this.cacheDir)) {\n            fsSync.mkdirSync(this.cacheDir, { recursive: true });\n        }\n    }\n    public log(msg: string) {\n        const now = new Date();\n        const output = `${now.toISOString()}::\\t${msg}\\n`;\n        fsSync.writeFileSync(this.getLogFile(), output, { encoding: `utf-8`, flag: `as` });\n    }\n}\n\nexport function sign(content: string, secretKey: string) {\n    const Hmac = createHmac(`sha512`, secretKey);\n    Hmac.update(content, `utf-8`);\n    return Hmac.digest().toString(`hex`).toLowerCase();\n}\n\nexport function verify(content: string, secretKey: string, signature: string) {\n    const unverified = sign(content, secretKey);\n    return unverified == signature;\n}\n\nexport function getUUID() {\n    return UUID();\n}\n\nexport function getHash(str: string) {\n    const hash = createHash(`sha512`);\n    hash.update(str);\n    return hash.digest().toString(`base64url`);\n}\n\nexport async function ping() {\n    const stamp1 = new Date();\n    const response = await axios.get(`http://api.fulcrum-ai.dev:11451/ping`);\n    if (response.status != 200) throw new Error(`Unable to connect to server`);\n    const stamp2 = new Date();\n    return { ip: response.data.ip, lag: stamp2.getTime() - stamp1.getTime() };\n}\n\nexport async function getAnnouncement() {\n    const response = await axios.get(`http://api.fulcrum-ai.dev:11451/announce`);\n    return response.data.msg as string;\n}\n\nexport function clearOutput() {\n    process.stdout.write(\n        process.platform === \"win32\" ? \"\\x1B[2J\\x1B[0f\" : \"\\x1B[2J\\x1B[3J\\x1B[H\"\n    );\n}","import { Logger, getHash, sign } from \"../util\";\nimport axios from \"axios\";\nconst fetcher = axios.create({\n    baseURL: `http://api.fulcrum-ai.dev:11451/`,\n    headers: { \"Content-Type\": `application/json` },\n    validateStatus: (status) => {\n        return status <= 500;\n    }\n});\n\nexport class UserManager {\n    protected logger: Logger;\n    protected username: string;\n    protected secretKey: string;\n    protected assistantIds: string[];\n    protected conversationIds: string[];\n    protected invoiceIds: string[];\n    protected currAssistant: string;\n    protected currConversation: string;\n    protected balance: number;\n\n    protected credentials: {\n        username: string;\n        secretKey: string;\n    };\n\n    constructor() {\n        this.conversationIds = [];\n        this.assistantIds = [];\n        this.conversationIds = [];\n        this.invoiceIds = [];\n        this.currAssistant = ``;\n        this.currConversation = ``;\n        this.balance = 0;\n        this.username = ``;\n        this.secretKey = ``;\n        this.credentials = {\n            username: ``,\n            secretKey: ``\n        };\n        this.logger = new Logger(`User`);\n    }\n\n    public getUsername() {\n        return this.username;\n    }\n\n    public getBalance() {\n        return this.balance;\n    }\n\n    public getCurrConversation() {\n        return this.currConversation;\n    }\n\n    public getCurrAssistant() {\n        return this.currAssistant;\n    }\n\n    public async login(username: string, password: string) {\n        const secretKey = getHash(password);\n        const body = {\n            username: username\n        };\n        const response = await fetcher.post(`/login`, JSON.stringify(body), {\n            headers: {\n                \"signature\": sign(JSON.stringify(body), secretKey)\n            }\n        });\n        const result = response.data as ServerResponse;\n        let errMsg = ``;\n        if (!result.status) {\n            errMsg = `Log in failed: ${result.msg}`;\n            this.logger.log(errMsg);\n        }\n        else {\n            this.secretKey = secretKey;\n            this.username = username;\n        }\n        return { status: result.status, errMsg: errMsg };\n    }\n\n    public setCurrConversation(conversationId: string) {\n        if (!conversationId.length) {\n            this.currConversation = ``;\n            return true;\n        }\n        if (!this.conversationIds.includes(conversationId))\n            return false;\n        this.currConversation = conversationId;\n        return true;\n\n    }\n\n    public setCurrAssistant(assistantId: string) {\n        if (!this.assistantIds.includes(assistantId))\n            return false;\n        this.currAssistant = assistantId;\n        return true;\n    }\n\n    public async sendMessage(message: string) {\n        const conversationId = this.currConversation ? this.currConversation : ``;\n        const reqBody = {\n            username: this.username,\n            message: message,\n            assistantId: this.currAssistant,\n            conversationId: conversationId\n        } as CliRequest.Body;\n        const response = await fetcher.post(`/message`, JSON.stringify(reqBody), {\n            headers: { signature: sign(JSON.stringify(reqBody), this.secretKey) }\n        });\n        const data: ServerResponse = response.data;\n        if (!response.status || !data.status) {\n            return {\n                status: false,\n                message: response.statusText + `\\t` + data.msg\n            };\n        }\n        else return {\n            status: true,\n            content: data.content as {\n                message: string;\n                conversationId: string;\n                conversation: Conversation;\n                assistantId: string;\n            }\n        };\n    }\n\n    public async register(username: string, password: string, email: string, token: string) {\n        const response = (await fetcher.post(`/register`, JSON.stringify({\n            username: username,\n            password: password,\n            email: email,\n            token: token\n        }))).data as ServerResponse;\n        let errMsg = ``;\n        if (!response.status) {\n            errMsg = `Registration failed: ${response.msg}`;\n            this.logger.log(errMsg);\n        }\n        else {\n            this.secretKey = getHash(password);\n            this.username = username;\n        }\n        return {\n            status: response.status,\n            errMsg: errMsg\n        };\n    }\n\n    public listAssistantIds() {\n        return this.assistantIds;\n    }\n\n    public listConversationIds() {\n        return this.conversationIds;\n    }\n\n    public listInvoiceIds() {\n        return this.invoiceIds;\n    }\n\n    public async sync() {\n        const user = {\n            balance: this.balance,\n            assistantIds: this.assistantIds,\n            conversationIds: this.conversationIds,\n            invoiceIds: this.invoiceIds\n        };\n        const body = {\n            username: this.username,\n            reqInfo: { hash: getHash(JSON.stringify(user)) }\n        } as CliRequest.Body;\n        const bodyStr = JSON.stringify(body);\n        const response = await fetcher.post(`/fetch`, bodyStr, {\n            headers: { signature: sign(bodyStr, this.secretKey) }\n        });\n        if (!response.status) {\n            this.logger.log(`Data sync failed (external access error): ${response.statusText}`);\n            return;\n        }\n        const data = response.data as ServerResponse;\n        if (!data.status) {\n            this.logger.log(`Data sync failed (server internal err): ${data.msg}`);\n        } else {\n            this.logger.log(`Data synced from server: \\n${JSON.stringify(data.content, null, 4)}`);\n            if (data.content.assistantIds)\n                this.assistantIds = data.content.assistantIds;\n            if (data.content.conversationIds)\n                this.conversationIds = data.content.conversationIds;\n            if (data.content.invoiceIds)\n                this.invoiceIds = data.content.invoiceIds;\n            if (data.content.balance)\n                this.balance = data.content.balance;\n        }\n        return data.status;\n    }\n\n    public isLoggedIn() {\n        return (this.username.length > 0) ? true : false;\n    }\n\n    public async recharge(token: string) {\n        const body = {\n            username: this.username,\n            operations: {\n                recharge: token\n            }\n        };\n        const bodyStr = JSON.stringify(body);\n        const response = await fetcher.post(`/operations`, bodyStr, {\n            headers: {\n                signature: sign(bodyStr, this.secretKey)\n            }\n        });\n        if (!response.status) {\n            this.logger.log(`Operation failed (external access error): ${response.statusText}`);\n            return { status: false, msg: `Operation failed (external access error): ${response.statusText}` };\n        }\n        const data = response.data as ServerResponse;\n        if (!data.status) {\n            this.logger.log(`Operation failed (server internal err): ${data.msg}`);\n            return { status: false, msg: `Operation failed (server internal err): ${data.msg}` };\n        } else {\n            return { status: true, msg: data.content.invoiceId };\n        }\n    }\n}","import * as fsSync from \"fs\";\nimport { Logger, getHash } from \"../../util\";\n\nexport class DataManager {\n    protected readonly cacheDir: string;\n    protected readonly credentials: {\n        username: string;\n        secretKey: string;\n    };\n    protected logger: Logger;\n    constructor(module: string, username?: string, password?: string) {\n        this.cacheDir = `.cache/${module}`;\n        this.credentials = {\n            username: username ? username : ``,\n            secretKey: password ? getHash(password) : ``,\n        }\n        if (!fsSync.existsSync(this.cacheDir))\n            fsSync.mkdirSync(this.cacheDir, { recursive: true });\n        this.logger = new Logger(module);\n    }\n\n    public setCredentials(username?: string, password?: string) {\n        this.credentials.username = username ? username : this.credentials.username;\n        this.credentials.secretKey = password ? getHash(password) : this.credentials.secretKey;\n    }\n}","import * as fsAsync from \"fs/promises\";\nimport axios from \"axios\";\nimport { sign } from \"../util\";\nimport { DataManager } from \"./base/base\";\nimport columnify from \"columnify\";\nconst fetcher = axios.create({\n    baseURL: `http://api.fulcrum-ai.dev:11451/`,\n    headers: { \"Content-Type\": `application/json` },\n    validateStatus: (status) => {\n        return status <= 500;\n    }\n});\n\nexport class ConversationManager extends DataManager {\n    constructor(username?: string, password?: string) {\n        super(`conversations`, username, password);\n    }\n\n    public async get(conversationId: string) {\n        await this.download([conversationId]);\n        const raw = await fsAsync.readFile(`${this.cacheDir}/${conversationId}.conv`, { encoding: `utf-8` });\n        return JSON.parse(raw) as Conversation;\n    }\n\n    public async download(conversationIds: string[]) {\n        const body = {\n            username: this.credentials.username,\n            reqInfo: {\n                conversationIds: conversationIds\n            }\n        }\n        const response = await fetcher.post(`/fetch`, JSON.stringify(body), {\n            headers: {\n                signature: sign(JSON.stringify(body), this.credentials.secretKey)\n            }\n        });\n        const resultIds: string[] = [];\n        if (response.status != 200) {\n            this.logger.log(`Download request failed (external): ${response.statusText} ${response.status}`);\n            return resultIds;\n        }\n        const data = response.data as ServerResponse;\n        if (!data.status) {\n            this.logger.log(`Download request failed (internal): ${data.msg}`);\n            return resultIds;\n        }\n        const conversations: Conversation[] = data.content.conversations;\n        for (const i in conversations) {\n            const conversation = conversations[i];\n            resultIds.push(conversation.id);\n            await fsAsync.writeFile(`${this.cacheDir}/${conversation.id}.conv`,\n                JSON.stringify(conversation, null, 4), { encoding: `utf-8` });\n        }\n        this.logger.log(`Downloaded conversation files from server: \\n\\t${resultIds.join(`\\n\\t`)}`);\n        return resultIds;\n    }\n}","import * as fsSync from \"fs\";\nimport * as fsAsync from \"fs/promises\";\nimport columnify from \"columnify\";\nimport axios from \"axios\";\nimport { sign } from \"../util\";\nimport { DataManager } from \"./base/base\";\nconst fetcher = axios.create({\n    baseURL: `http://api.fulcrum-ai.dev:11451/`,\n    headers: { \"Content-Type\": `application/json` },\n    validateStatus: (status) => {\n        return status <= 500;\n    }\n});\n\nexport class InvoiceManager extends DataManager {\n    constructor(username?: string, password?: string) {\n        super(`invoices`, username, password);\n    }\n    public async get(invoiceId: string) {\n        if (!fsSync.existsSync(`${this.cacheDir}/${invoiceId}.invoice`))\n            await this.download([invoiceId]);\n        const raw = await fsAsync.readFile(`${this.cacheDir}/${invoiceId}.invoice`, `utf-8`);\n        return JSON.parse(raw) as Invoice;\n    }\n\n    public async download(invoiceIds: string[]) {\n        const body = {\n            username: this.credentials.username,\n            reqInfo: {\n                invoiceIds: invoiceIds\n            }\n        };\n        const response = await fetcher.post(`/fetch`, JSON.stringify(body), {\n            headers: {\n                signature: sign(JSON.stringify(body), this.credentials.secretKey),\n            }\n        });\n        const resultIds: string[] = [];\n        if (response.status != 200) {\n            this.logger.log(`Download request failed (external): ${response.statusText} ${response.status}`);\n            return resultIds;\n        }\n        const data = response.data as ServerResponse;\n        if (!data.status) {\n            this.logger.log(`Download request failed (internal): ${data.msg}`);\n            return resultIds;\n        }\n        const invoices = data.content.invoices as Invoice[];\n        for (const i in invoices) {\n            resultIds.push(invoices[i].id);\n            await fsAsync.writeFile(`${this.cacheDir}/${invoices[i].id}.invoice`, JSON.stringify(invoices[i], null, 4), `utf-8`);\n        }\n        this.logger.log(`Downloaded invoice files from server: \\n\\t${resultIds.join(`\\n\\t`)}`);\n        return resultIds;\n    }\n\n    public async export(invoiceIds: string[], saveToFile: boolean) {\n        await this.download(invoiceIds);\n        const invoices: Invoice[] = [];\n        for (const i in invoiceIds) {\n            const raw = await fsAsync.readFile(`${this.cacheDir}/${invoiceIds[i]}.invoice`, `utf-8`);\n            const invoice = JSON.parse(raw);\n            invoices.push(invoice);\n        }\n        const exportStr = columnify(invoices, {\n            columns: [`timestamp`, `id`, `description`, `inputTokens`, `inputPrice`, `outputTokens`, `outputPrice`, `total`],\n            columnSplitter: (saveToFile) ? `,` : `|`,\n        });\n        return exportStr;\n    }\n}","import * as fsSync from \"fs\";\nimport * as fsAsync from \"fs/promises\";\nimport axios from \"axios\";\nimport { sign } from \"../util\";\nimport { DataManager } from \"./base/base\";\nimport columnify from \"columnify\";\nconst fetcher = axios.create({\n    baseURL: `http://api.fulcrum-ai.dev:11451/`,\n    headers: { \"Content-Type\": `application/json` },\n    validateStatus: (status) => {\n        return status <= 500;\n    }\n});\n\nexport class AssistantManager extends DataManager {\n    protected Names: Map<string, string>;\n    protected Ids: Map<string, string>;\n    constructor(username?: string, password?: string) {\n        super(`assistants`, username, password);\n        this.Names = new Map();\n        this.Ids = new Map();\n    }\n\n    public async get(assistantId: string) {\n        if (!fsSync.existsSync(`${this.cacheDir}/${assistantId}.asst`))\n            await this.download([assistantId]);\n        const raw = await fsAsync.readFile(`${this.cacheDir}/${assistantId}.asst`, { encoding: `utf-8` });\n        return JSON.parse(raw) as AssistantInfo;\n    }\n\n    public getName(assistantId: string) {\n        return this.Names.get(assistantId);\n    }\n\n    public getId(name: string) {\n        name = name.toLowerCase();\n        return this.Ids.get(name);\n    }\n\n    public async download(assistantIds: string[]) {\n        const body = {\n            username: this.credentials.username,\n            reqInfo: {\n                assistantIds: assistantIds\n            }\n        };\n        const response = await fetcher.post(`/fetch`, JSON.stringify(body), {\n            headers: {\n                signature: sign(JSON.stringify(body), this.credentials.secretKey)\n            }\n        });\n        const resultIds: string[] = [];\n        if (response.status != 200) {\n            this.logger.log(`Download request failed (external): ${response.statusText} ${response.status}`);\n            return resultIds;\n        }\n        const data = response.data as ServerResponse;\n        if (!data.status) {\n            this.logger.log(`Download request failed (internal): ${data.msg}`);\n            return resultIds;\n        }\n        const assistants: AssistantInfo[] = data.content.assistants;\n        for (const i in assistants) {\n            const assistant = assistants[i];\n            resultIds.push(assistant.id);\n            this.Names.set(assistant.id, assistant.name);\n            this.Ids.set(assistant.name.toLowerCase(), assistant.id);\n            await fsAsync.writeFile(`${this.cacheDir}/${assistant.id}.asst`, JSON.stringify(assistant, null, 4), `utf-8`);\n        }\n        this.logger.log(`Downloaded assistant files from server: \\n\\t${resultIds.join(`\\n\\t`)}`);\n        return resultIds;\n    }\n}","import { UserManager } from \"./managers/user\";\nimport { ping, clearOutput, getAnnouncement, getHash } from \"./util\";\nimport * as fsSync from \"fs\";\nimport * as fsAsync from \"fs/promises\";\nimport { ConversationManager } from \"./managers/conversations\";\nimport { InvoiceManager } from \"./managers/invoices\";\nimport { AssistantManager } from \"./managers/assistants\";\nimport t from \"terminal-kit\";\nimport delay from \"delay\";\nconst terminal = t.terminal;\n\nconst User = new UserManager();\nconst Assistants = new AssistantManager();\nconst Conversations = new ConversationManager();\nconst Invoices = new InvoiceManager();\nconst version = `2.0.1`;\n\nlet busy = false;\nlet bound = false;\n\nasync function printMessage(role: string, message: string, opts?: {\n    slowTyping?: boolean;\n    timestamp?: string;\n}) {\n    let now = new Date();\n    if (opts && opts.timestamp)\n        now = new Date(opts.timestamp);\n    const dateStr = `${now.getFullYear()}.${now.getMonth() + 1}.${now.getDate()}`;\n    const timestamp = `${now.toTimeString().substring(0, 8)}`;\n    terminal(dateStr + ` `).green(timestamp + ` `).cyan(role).defaultColor(`> : `);\n    if (opts && opts.slowTyping) {\n        for (let i = 0; i < message.length; i++) {\n            process.stdout.write(message.charAt(i));\n            await delay(10);\n        }\n    }\n    else\n        process.stdout.write(message);\n    terminal(`\\n\\n`);\n}\n\nexport async function setup() {\n    const result = await ping();\n    terminal.green.bold(`Server connection established from IP ${result.ip}, ping: ${result.lag} ms\\n`);\n    terminal.bold(`Process started. \\n`);\n    keyBind();\n    let username = ``, password = ``;\n    let useCred = false;\n    if (fsSync.existsSync(`.cache/cred`)) {\n        terminal(`\\nUse previously saved account? [Y/N]`);\n        useCred = await terminal.yesOrNo({\n            yes: [`y`, `Y`, `ENTER`],\n            no: [`n`, `N`, `ESC`]\n        }).promise as boolean;\n        if (useCred) {\n            const raw = await fsAsync.readFile(`.cache/cred`, `utf-8`);\n            const cred = JSON.parse(raw) as { username: string, pw: string };\n            username = cred.username;\n            password = cred.pw;\n            await User.login(username, password);\n        }\n    }\n    while (!User.isLoggedIn()) {\n        terminal.saveCursor().eraseDisplayBelow();\n        const option = await terminal.singleColumnMenu([`Login`, `Register`], { cancelable: true }).promise;\n        if (option.canceled) {\n            terminal.bold.red(`\\nLogin interrupted, exiting...\\n`);\n            terminal.processExit(0);\n            await delay(2000);\n            process.exit(0);\n        }\n        terminal(`\\n`);\n\n        if (option.selectedIndex == 0) {\n            terminal(`Log in process initiated.\\n`);\n            terminal(`\\nUsername: `);\n            username = await terminal.inputField().promise as string;\n            terminal(`\\nPassword: `);\n            password = await terminal.inputField({\n                echoChar: `*`\n            }).promise as string;\n            const result = await User.login(username, password);\n            if (!result.status)\n                terminal.red(`Log in failed: ${result.errMsg}`);\n            else\n                break;\n        } else {\n            terminal.bold(`Registration process initiated.\\n`);\n            terminal(`\\nUsername: `);\n            username = await terminal.inputField().promise as string;\n            terminal(`\\nEmail: `);\n            const email = await terminal.inputField().promise as string;\n            terminal(`\\nPassword: `);\n            password = await terminal.inputField({ echoChar: `*` }).promise as string;\n            terminal(`\\nInvitation Code: `);\n            const token = await terminal.inputField().promise as string;\n\n            const result = await User.register(username, password, email, token);\n            if (!result.status)\n                terminal.red(`\\nRegistration failed: ${result.errMsg}`);\n            else\n                break;\n\n        }\n        await delay(2000);\n        terminal.restoreCursor().eraseDisplayBelow();\n    }\n    Assistants.setCredentials(username, password);\n    Conversations.setCredentials(username, password);\n    Invoices.setCredentials(username, password);\n    clearOutput();\n    if (!useCred) {\n        terminal.bold(`\\nRemember this account? [Y/N]`);\n        const saveCredentials = await terminal.yesOrNo({\n            yes: [`y`, `Y`, `ENTER`],\n            no: [`n`, `N`, `ESC`]\n        }).promise;\n        terminal(`\\n`)\n        if (saveCredentials) {\n            await fsAsync.writeFile(`.cache/cred`, JSON.stringify({ username: username, pw: password }), `utf-8`);\n            terminal.green(`Log in credentials saved\\n`);\n        }\n    }\n    await User.sync();\n    await Assistants.download(User.listAssistantIds());\n    await Conversations.download(User.listConversationIds());\n    await Invoices.download(User.listInvoiceIds());\n    if (!fsSync.existsSync(`downloads`))\n        fsSync.mkdirSync(`downloads`);\n    User.setCurrAssistant(Assistants.getId(`GPT-4`) as string);\n    terminal.green.bold(`Log in success!\\n`);\n    terminal(`Welcome to Fulcrum AI\\nType message directly to chat with AI Assistants\\n`);\n    terminal(`Press CTRL_L to see Menu, Settings, and current announcement\\n\\n`);\n    terminal.bold(`***Latest announcement from server***\\n${await getAnnouncement()}\\n\\n`);\n    //terminal.saveCursor().bold(`>>`);\n    onMessage();\n}\n\nfunction onMessage() {\n    if (bound || busy) return;\n    bound = true;\n    terminal.saveCursor();\n    terminal.bold(`>>`);\n    terminal.inputField({}, async (err, input) => {\n        if (busy || !input) {\n            //terminal.restoreCursor().eraseLine().eraseDisplayBelow();\n            bound = false;\n            onMessage();\n            return;\n        }\n        if (err) {\n            terminal.red.bold(`\\nAn error occurred: ${err}\\n`).saveCursor();\n            await delay(3000);\n            bound = false;\n            onMessage();\n            return;\n        }\n        terminal.restoreCursor().eraseLine().eraseDisplayBelow();\n\n        busy = true;\n        await printMessage(User.getUsername(), input);\n        const animate = (await terminal.spinner(`unboxing-color`));\n        const response = await User.sendMessage(input);\n        if (response.status && response.content) {\n            animate.animate(false);\n            terminal.eraseLine().move(-1, 0);\n            await printMessage(Assistants.getName(response.content.assistantId) as string, response.content.message, {\n                slowTyping: true\n            });\n            await User.sync();\n            User.setCurrConversation(response.content.conversationId);\n        } else {\n            terminal.red.bold(`\\nAn error occurred: ${err}\\n`).saveCursor();\n            bound = false;\n            onMessage();\n            return;\n        }\n        busy = false;\n        terminal(`\\n`);\n        bound = false;\n        onMessage();\n    });\n}\n\nfunction keyBind() {\n    terminal.on(`key`, (name: string) => {\n        if (!User.isLoggedIn()) {\n            if (name == `CTRL_Q`) {\n                terminal.red(`Exiting program...`);\n                process.exit(0);\n            }\n        }\n        if (User.isLoggedIn()) {\n            if (name == `CTRL_L`)\n                onMenu();\n        }\n    })\n}\n\nasync function onMenu() {\n    busy = true;\n    clearOutput();\n    terminal.bold(`**Current Announcement**\\n`);\n    terminal(await getAnnouncement());\n    terminal(`\\nPress ESC at any time to exit menu`);\n    terminal.singleLineMenu([`Status`, `Settings`, `Account`, `Clear Screen`, `Version`, `Exit`],\n        {\n            style: terminal.inverse,\n            selectedStyle: terminal.defaultColor,\n            cancelable: true\n        },\n        async (err, input) => {\n            if (err) {\n                terminal.red(`An error occurred turning on the menu`);\n                return;\n            }\n            terminal(`\\n`);\n            await User.sync();\n            if (input)\n                switch (input.selectedIndex) {\n                    case 0:\n                        terminal(`Current status: \\n`);\n                        terminal(`Account balance: ${User.getBalance()}\\n`);\n                        terminal(`Assistant: ${Assistants.getName(User.getCurrAssistant())}\\n`);\n                        const conversationId = User.getCurrConversation();\n                        if (!conversationId.length)\n                            terminal(`New conversation\\n`);\n                        else {\n                            const conversation = await Conversations.get(conversationId);\n                            terminal(`Conversation: \\nTitle: ${conversation.title}\\tId: ${conversation.id}\\n`);\n                        }\n                        break;\n                    case 1:\n                        clearOutput();\n                        const selected1 = await terminal.singleRowMenu([`Assistants`, `Conversations`], { cancelable: true }).promise;\n                        if (selected1.canceled) {\n                            terminal.red.bold(`\\nAction canceled\\n`);\n                            break;\n                        }\n                        terminal(`\\n`);\n                        if (selected1.selectedIndex == 0) {\n                            clearOutput();\n                            //await Assistants.download(User.listAssistantIds());\n                            const assistantIds = User.listAssistantIds();\n                            const assistants: AssistantInfo[] = [];\n                            const names: string[] = [];\n                            for (const i in assistantIds) {\n                                const assistant = await Assistants.get(assistantIds[i]);\n                                assistants.push(assistant);\n                                names.push(assistant.name);\n                            }\n                            terminal(`Available Assistants: \\n`);\n                            const sA = await terminal.singleColumnMenu(names, { cancelable: true }).promise;\n                            if (sA.canceled) {\n                                terminal.red.bold(`\\nAction canceled\\n`);\n                                break;\n                            }\n                            User.setCurrAssistant(assistants[sA.selectedIndex].id);\n                            terminal.bold(`\\nCurrent assistant: ${sA.selectedText}\\n`);\n                        } else {\n                            clearOutput();\n                            await Conversations.download(User.listConversationIds());\n                            const conversationIds = User.listConversationIds();\n                            const conversations: Conversation[] = [];\n                            const list: string[] = [];\n                            for (const i in conversationIds) {\n                                const conversation = await Conversations.get(conversationIds[i]);\n                                conversations.push(conversation);\n                                list.push(conversation.title);\n                            }\n                            list.push(`New conversation`);\n                            const sC = await terminal.singleColumnMenu(list, { cancelable: true }).promise;\n                            if (sC.canceled) {\n                                terminal.red.bold(`\\nAction canceled\\n`);\n                                break;\n                            }\n                            if (sC.selectedIndex < conversations.length)\n                                User.setCurrConversation(conversations[sC.selectedIndex].id);\n                            else\n                                User.setCurrConversation(``);\n                            terminal.bold(`\\nCurrent conversation: ${sC.selectedText}\\n`);\n                        }\n                        break;\n                    case 2:\n                        clearOutput\n                        terminal(`Current balance: ${User.getBalance()}`);\n                        const selected2 = await terminal.singleColumnMenu([`Account Summary`, `Recharge/Top Up`], { cancelable: true }).promise;\n                        if (selected2.canceled) {\n                            terminal.red.bold(`\\nAction canceled\\n`);\n                            break;\n                        }\n                        terminal(`\\n`);\n                        if (selected2.selectedIndex == 0) {\n                            const invoiceIds = User.listInvoiceIds();\n                            await Invoices.download(invoiceIds);\n                            const exports = await Invoices.export(invoiceIds, true);\n                            await fsAsync.writeFile(`downloads/Account Summary.csv`, exports, `utf-8`);\n                            terminal(`Account summary downloaded to \"downloads\" folder\\n`);\n                            const invoices: Invoice[] = [];\n                            const desc: string[] = [];\n                            for (const i in invoiceIds) {\n                                const invoice = await Invoices.get(invoiceIds[i]);\n                                invoices.push(invoice);\n                                desc.push(invoice.timestamp + `\\n` + invoice.description);\n                            }\n                            const sI = await terminal.singleColumnMenu(desc, { cancelable: true }).promise;\n                            if (sI.canceled) {\n                                terminal.red.bold(`\\nAction canceled\\n`);\n                                break;\n                            }\n                            terminal(`\\n`);\n                            const invoice = invoices[sI.selectedIndex];\n                            terminal(`ID: ${invoice.id}\\t Timestamp: ${invoice.timestamp}`);\n                            terminal(`Description: ${invoice.description}\\n`);\n                            if (invoice.inputCost) {\n                                terminal.table([\n                                    [`Input Tokens`, `Input Price (USD/1k tokens)`, `Input Total Costs`],\n                                    [(invoice.inputTokens as number).toString(), (invoice.inputPrice as number).toString(), (invoice.inputCost as number).toString()],\n                                    [`Output Tokens`, `Output Price (USD/1k tokens)`, `Output Total Costs`],\n                                    [(invoice.outputTokens as number).toString(), (invoice.outputPrice as number).toString(), (invoice.outputCost as number).toString()]\n                                ]);\n                                terminal(`\\n`);\n                            }\n                            terminal.bold(`Total: ${invoice.total}`);\n                        } else {\n                            terminal(`Input recharge code/token: `);\n                            const token = await terminal.inputField().promise;\n                            if (token && token.length) {\n                                const response = await User.recharge(token);\n                                if (!response.status) {\n                                    terminal.red.bold(`Operation unsuccessful, reason: ${response.msg}\\n`);\n                                    break;\n                                }\n                                terminal.green(`Operation successful! `);\n                                await User.sync();\n                                terminal.cyan(`Current balance: ${User.getBalance()}`);\n                            } else {\n                                terminal.red.bold(`Invalid token inputted: ${token}\\n`);\n                                break;\n                            }\n                        }\n                        break;\n                    case 3:\n                        clearOutput();\n                        break;\n                    case 4:\n                        terminal.bold(`\\nCurrent client version: ${version}\\nSee https://github.com/KevinKWZheng/Fulcrum-Clients for client side download & releases\\n`);\n                        break;\n                    case 5:\n                        const confirmation = await terminal.red(`\\nAre you sure to exit? [Y/N]\\n`).yesOrNo({\n                            yes: [`y`, `Y`, `ENTER`],\n                            no: [`n`, `N`]\n                        }).promise;\n                        if (confirmation) {\n                            terminal(`\\nExiting program...\\n`);\n                            terminal.processExit(0);\n                            await delay(2000);\n                        } else\n                            terminal.red.bold(`\\nOperation canceled`);\n                        break;\n                    default:\n                        break;\n                }\n            terminal.inverse(`\\n\\nPress any key to exit`);\n            terminal.once(`key`, async () => {\n                clearOutput();\n                terminal.moveTo(1, 1);\n                const conversationId = User.getCurrConversation();\n                if (conversationId && conversationId.length) {\n                    await Conversations.download([conversationId]);\n                    const conversation = await Conversations.get(conversationId);\n                    for (const i in conversation.messages) {\n                        const msg = conversation.messages[i];\n                        await printMessage(msg.username, msg.content, {\n                            timestamp: msg.timestamp\n                        });\n                    }\n                }\n                //terminal.saveCursor().bold(`>>`);\n                busy = bound = false;\n                terminal(`\\n`).saveCursor();\n                onMessage();\n            });\n        });\n}","import { setup } from \"./src/processor\";\n\nfunction init() {\n    return new Promise<void>(resolve => {\n        setup()\n            .then(() => resolve());\n    });\n}\n\ninit().then(() => {\n});\n"],"names":["Logger","cacheDir","getLogFile","timestamp","time","Date","this","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","constructor","module","fsSync","existsSync","mkdirSync","recursive","log","msg","output","toISOString","writeFileSync","encoding","flag","sign","content","secretKey","Hmac","createHmac","update","digest","toString","toLowerCase","getHash","str","hash","createHash","async","getAnnouncement","axios","get","data","clearOutput","process","stdout","write","platform","fetcher","create","baseURL","headers","validateStatus","status","DataManager","credentials","logger","username","password","setCredentials","terminal","t","User","assistantIds","conversationIds","invoiceIds","currAssistant","currConversation","balance","getUsername","getBalance","getCurrConversation","getCurrAssistant","login","body","result","post","JSON","stringify","signature","errMsg","setCurrConversation","conversationId","length","includes","setCurrAssistant","assistantId","sendMessage","message","reqBody","response","statusText","register","email","token","listAssistantIds","listConversationIds","listInvoiceIds","sync","user","reqInfo","bodyStr","isLoggedIn","recharge","operations","invoiceId","Assistants","Names","Ids","super","Map","download","raw","fsAsync","readFile","parse","getName","getId","name","resultIds","assistants","i","assistant","push","id","set","writeFile","join","Conversations","conversations","conversation","Invoices","invoices","saveToFile","invoice","columnify","columns","columnSplitter","version","busy","bound","printMessage","role","opts","now","dateStr","getFullYear","getMonth","getDate","toTimeString","substring","green","cyan","defaultColor","slowTyping","charAt","delay","setup","stamp1","Error","stamp2","ip","lag","getTime","ping","bold","on","red","exit","singleLineMenu","style","inverse","selectedStyle","cancelable","err","input","selectedIndex","title","selected1","singleRowMenu","promise","canceled","names","sA","singleColumnMenu","selectedText","list","sC","selected2","exports","export","desc","description","sI","inputCost","table","inputTokens","inputPrice","outputTokens","outputPrice","outputCost","total","inputField","yesOrNo","yes","no","processExit","once","moveTo","messages","saveCursor","onMessage","onMenu","useCred","cred","pw","eraseDisplayBelow","option","echoChar","restoreCursor","saveCredentials","eraseLine","animate","spinner","move","Promise","resolve","then"],"mappings":"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"}