import*as e from"fs";import{createHmac as t,createHash as s}from"crypto";import"uuid";import n from"axios";import*as a from"fs/promises";import i from"columnify";import r from"terminal-kit";import o from"delay";class c{cacheDir;getLogFile(e){let t=new Date;return e&&(t=new Date(e)),`${this.cacheDir}/${t.getUTCFullYear()}-${t.getUTCMonth()}-${t.getUTCDate()}-${t.getUTCHours()}.log`}constructor(t){this.cacheDir=t?`logs/${t}`:"logs/",e.existsSync(this.cacheDir)||e.mkdirSync(this.cacheDir,{recursive:!0})}log(t){const s=`${(new Date).toISOString()}::\t${t}\n`;e.writeFileSync(this.getLogFile(),s,{encoding:"utf-8",flag:"as"})}}function l(e,s){const n=t("sha512",s);return n.update(e,"utf-8"),n.digest().toString("hex").toLowerCase()}function d(e){const t=s("sha512");return t.update(e),t.digest().toString("base64url")}async function u(){return(await n.get("http://api.fulcrum-ai.dev:11451/announce")).data.msg}function g(){process.stdout.write("win32"===process.platform?"[2J[0f":"[2J[3J[H")}const h=n.create({baseURL:"http://api.fulcrum-ai.dev:11451/",headers:{"Content-Type":"application/json"},validateStatus:e=>e<=500});class m{cacheDir;credentials;logger;constructor(t,s,n){this.cacheDir=`.cache/${t}`,this.credentials={username:s||"",secretKey:n?d(n):""},e.existsSync(this.cacheDir)||e.mkdirSync(this.cacheDir,{recursive:!0}),this.logger=new c(t)}setCredentials(e,t){this.credentials.username=e||this.credentials.username,this.credentials.secretKey=t?d(t):this.credentials.secretKey}}const p=n.create({baseURL:"http://api.fulcrum-ai.dev:11451/",headers:{"Content-Type":"application/json"},validateStatus:e=>e<=500});const w=n.create({baseURL:"http://api.fulcrum-ai.dev:11451/",headers:{"Content-Type":"application/json"},validateStatus:e=>e<=500});const f=n.create({baseURL:"http://api.fulcrum-ai.dev:11451/",headers:{"Content-Type":"application/json"},validateStatus:e=>e<=500});const y=r.terminal,v=new class{logger;username;secretKey;assistantIds;conversationIds;invoiceIds;currAssistant;currConversation;balance;credentials;constructor(){this.conversationIds=[],this.assistantIds=[],this.conversationIds=[],this.invoiceIds=[],this.currAssistant="",this.currConversation="",this.balance=0,this.username="",this.secretKey="",this.credentials={username:"",secretKey:""},this.logger=new c("User")}getUsername(){return this.username}getBalance(){return this.balance}getCurrConversation(){return this.currConversation}getCurrAssistant(){return this.currAssistant}async login(e,t){const s=d(t),n={username:e},a=(await h.post("/login",JSON.stringify(n),{headers:{signature:l(JSON.stringify(n),s)}})).data;let i="";return a.status?(this.secretKey=s,this.username=e):(i=`Log in failed: ${a.msg}`,this.logger.log(i)),{status:a.status,errMsg:i}}setCurrConversation(e){return e.length?!!this.conversationIds.includes(e)&&(this.currConversation=e,!0):(this.currConversation="",!0)}setCurrAssistant(e){return!!this.assistantIds.includes(e)&&(this.currAssistant=e,!0)}async sendMessage(e){const t=this.currConversation?this.currConversation:"",s={username:this.username,message:e,assistantId:this.currAssistant,conversationId:t},n=await h.post("/message",JSON.stringify(s),{headers:{signature:l(JSON.stringify(s),this.secretKey)}}),a=n.data;return n.status&&a.status?{status:!0,content:a.content}:{status:!1,message:n.statusText+"\t"+a.msg}}async register(e,t,s,n){const a=(await h.post("/register",JSON.stringify({username:e,password:t,email:s,token:n}))).data;let i="";return a.status?(this.secretKey=d(t),this.username=e):(i=`Registration failed: ${a.msg}`,this.logger.log(i)),{status:a.status,errMsg:i}}listAssistantIds(){return this.assistantIds}listConversationIds(){return this.conversationIds}listInvoiceIds(){return this.invoiceIds}async sync(){const e={balance:this.balance,assistantIds:this.assistantIds,conversationIds:this.conversationIds,invoiceIds:this.invoiceIds},t={username:this.username,reqInfo:{hash:d(JSON.stringify(e))}},s=JSON.stringify(t),n=await h.post("/fetch",s,{headers:{signature:l(s,this.secretKey)}});if(!n.status)return void this.logger.log(`Data sync failed (external access error): ${n.statusText}`);const a=n.data;return a.status?(this.logger.log(`Data synced from server: \n${JSON.stringify(a.content,null,4)}`),a.content.assistantIds&&(this.assistantIds=a.content.assistantIds),a.content.conversationIds&&(this.conversationIds=a.content.conversationIds),a.content.invoiceIds&&(this.invoiceIds=a.content.invoiceIds),a.content.balance&&(this.balance=a.content.balance)):this.logger.log(`Data sync failed (server internal err): ${a.msg}`),a.status}isLoggedIn(){return this.username.length>0}async recharge(e){const t={username:this.username,operations:{recharge:e}},s=JSON.stringify(t),n=await h.post("/operations",s,{headers:{signature:l(s,this.secretKey)}});if(!n.status)return this.logger.log(`Operation failed (external access error): ${n.statusText}`),{status:!1,msg:`Operation failed (external access error): ${n.statusText}`};const a=n.data;return a.status?{status:!0,msg:a.content.invoiceId}:(this.logger.log(`Operation failed (server internal err): ${a.msg}`),{status:!1,msg:`Operation failed (server internal err): ${a.msg}`})}},C=new class extends m{Names;Ids;constructor(e,t){super("assistants",e,t),this.Names=new Map,this.Ids=new Map}async get(t){e.existsSync(`${this.cacheDir}/${t}.asst`)||await this.download([t]);const s=await a.readFile(`${this.cacheDir}/${t}.asst`,{encoding:"utf-8"});return JSON.parse(s)}getName(e){return this.Names.get(e)}getId(e){return e=e.toLowerCase(),this.Ids.get(e)}async download(e){const t={username:this.credentials.username,reqInfo:{assistantIds:e}},s=await f.post("/fetch",JSON.stringify(t),{headers:{signature:l(JSON.stringify(t),this.credentials.secretKey)}}),n=[];if(200!=s.status)return this.logger.log(`Download request failed (external): ${s.statusText} ${s.status}`),n;const i=s.data;if(!i.status)return this.logger.log(`Download request failed (internal): ${i.msg}`),n;const r=i.content.assistants;for(const e in r){const t=r[e];n.push(t.id),this.Names.set(t.id,t.name),this.Ids.set(t.name.toLowerCase(),t.id),await a.writeFile(`${this.cacheDir}/${t.id}.asst`,JSON.stringify(t,null,4),"utf-8")}return this.logger.log(`Downloaded assistant files from server: \n\t${n.join("\n\t")}`),n}},I=new class extends m{constructor(e,t){super("conversations",e,t)}async get(e){await this.download([e]);const t=await a.readFile(`${this.cacheDir}/${e}.conv`,{encoding:"utf-8"});return JSON.parse(t)}async download(e){const t={username:this.credentials.username,reqInfo:{conversationIds:e}},s=await p.post("/fetch",JSON.stringify(t),{headers:{signature:l(JSON.stringify(t),this.credentials.secretKey)}}),n=[];if(200!=s.status)return this.logger.log(`Download request failed (external): ${s.statusText} ${s.status}`),n;const i=s.data;if(!i.status)return this.logger.log(`Download request failed (internal): ${i.msg}`),n;const r=i.content.conversations;for(const e in r){const t=r[e];n.push(t.id),await a.writeFile(`${this.cacheDir}/${t.id}.conv`,JSON.stringify(t,null,4),{encoding:"utf-8"})}return this.logger.log(`Downloaded conversation files from server: \n\t${n.join("\n\t")}`),n}},$=new class extends m{constructor(e,t){super("invoices",e,t)}async get(t){e.existsSync(`${this.cacheDir}/${t}.invoice`)||await this.download([t]);const s=await a.readFile(`${this.cacheDir}/${t}.invoice`,"utf-8");return JSON.parse(s)}async download(e){const t={username:this.credentials.username,reqInfo:{invoiceIds:e}},s=await w.post("/fetch",JSON.stringify(t),{headers:{signature:l(JSON.stringify(t),this.credentials.secretKey)}}),n=[];if(200!=s.status)return this.logger.log(`Download request failed (external): ${s.statusText} ${s.status}`),n;const i=s.data;if(!i.status)return this.logger.log(`Download request failed (internal): ${i.msg}`),n;const r=i.content.invoices;for(const e in r)n.push(r[e].id),await a.writeFile(`${this.cacheDir}/${r[e].id}.invoice`,JSON.stringify(r[e],null,4),"utf-8");return this.logger.log(`Downloaded invoice files from server: \n\t${n.join("\n\t")}`),n}async export(e,t){await this.download(e);const s=[];for(const t in e){const n=await a.readFile(`${this.cacheDir}/${e[t]}.invoice`,"utf-8"),i=JSON.parse(n);s.push(i)}return i(s,{columns:["timestamp","id","description","inputTokens","inputPrice","outputTokens","outputPrice","total"],columnSplitter:t?",":"|"})}},b="2.0.1";let S=!1,x=!1;async function D(e,t,s){let n=new Date;s&&s.timestamp&&(n=new Date(s.timestamp));const a=`${n.getFullYear()}.${n.getMonth()+1}.${n.getDate()}`,i=`${n.toTimeString().substring(0,8)}`;if(y(a+" ").green(i+" ").cyan(e).defaultColor("> : "),s&&s.slowTyping)for(let e=0;e<t.length;e++)process.stdout.write(t.charAt(e)),await o(10);else process.stdout.write(t);y("\n\n")}async function N(){const t=await async function(){const e=new Date,t=await n.get("http://api.fulcrum-ai.dev:11451/ping");if(200!=t.status)throw new Error("Unable to connect to server");const s=new Date;return{ip:t.data.ip,lag:s.getTime()-e.getTime()}}();y.green.bold(`Server connection established from IP ${t.ip}, ping: ${t.lag} ms\n`),y.bold("Process started. \n"),y.on("key",(e=>{v.isLoggedIn()||"CTRL_Q"==e&&(y.red("Exiting program..."),process.exit(0)),v.isLoggedIn()&&"CTRL_L"==e&&async function(){S=!0,g(),y.bold("**Current Announcement**\n"),y(await u()),y("\nPress ESC at any time to exit menu"),y.singleLineMenu(["Status","Settings","Account","Clear Screen","Version","Exit"],{style:y.inverse,selectedStyle:y.defaultColor,cancelable:!0},(async(e,t)=>{if(e)y.red("An error occurred turning on the menu");else{if(y("\n"),await v.sync(),t)switch(t.selectedIndex){case 0:y("Current status: \n"),y(`Account balance: ${v.getBalance()}\n`),y(`Assistant: ${C.getName(v.getCurrAssistant())}\n`);const e=v.getCurrConversation();if(e.length){const t=await I.get(e);y(`Conversation: \nTitle: ${t.title}\tId: ${t.id}\n`)}else y("New conversation\n");break;case 1:g();const t=await y.singleRowMenu(["Assistants","Conversations"],{cancelable:!0}).promise;if(t.canceled){y.red.bold("\nAction canceled\n");break}if(y("\n"),0==t.selectedIndex){g();const e=v.listAssistantIds(),t=[],s=[];for(const n in e){const a=await C.get(e[n]);t.push(a),s.push(a.name)}y("Available Assistants: \n");const n=await y.singleColumnMenu(s,{cancelable:!0}).promise;if(n.canceled){y.red.bold("\nAction canceled\n");break}v.setCurrAssistant(t[n.selectedIndex].id),y.bold(`\nCurrent assistant: ${n.selectedText}\n`)}else{g(),await I.download(v.listConversationIds());const e=v.listConversationIds(),t=[],s=[];for(const n in e){const a=await I.get(e[n]);t.push(a),s.push(a.title)}s.push("New conversation");const n=await y.singleColumnMenu(s,{cancelable:!0}).promise;if(n.canceled){y.red.bold("\nAction canceled\n");break}n.selectedIndex<t.length?v.setCurrConversation(t[n.selectedIndex].id):v.setCurrConversation(""),y.bold(`\nCurrent conversation: ${n.selectedText}\n`)}break;case 2:y(`Current balance: ${v.getBalance()}`);const s=await y.singleColumnMenu(["Account Summary","Recharge/Top Up"],{cancelable:!0}).promise;if(s.canceled){y.red.bold("\nAction canceled\n");break}if(y("\n"),0==s.selectedIndex){const e=v.listInvoiceIds();await $.download(e);const t=await $.export(e,!0);await a.writeFile("downloads/Account Summary.csv",t,"utf-8"),y('Account summary downloaded to "downloads" folder\n');const s=[],n=[];for(const t in e){const a=await $.get(e[t]);s.push(a),n.push(a.timestamp+"\n"+a.description)}const i=await y.singleColumnMenu(n,{cancelable:!0}).promise;if(i.canceled){y.red.bold("\nAction canceled\n");break}y("\n");const r=s[i.selectedIndex];y(`ID: ${r.id}\t Timestamp: ${r.timestamp}`),y(`Description: ${r.description}\n`),r.inputCost&&(y.table([["Input Tokens","Input Price (USD/1k tokens)","Input Total Costs"],[r.inputTokens.toString(),r.inputPrice.toString(),r.inputCost.toString()],["Output Tokens","Output Price (USD/1k tokens)","Output Total Costs"],[r.outputTokens.toString(),r.outputPrice.toString(),r.outputCost.toString()]]),y("\n")),y.bold(`Total: ${r.total}`)}else{y("Input recharge code/token: ");const e=await y.inputField().promise;if(!e||!e.length){y.red.bold(`Invalid token inputted: ${e}\n`);break}{const t=await v.recharge(e);if(!t.status){y.red.bold(`Operation unsuccessful, reason: ${t.msg}\n`);break}y.green("Operation successful! "),await v.sync(),y.cyan(`Current balance: ${v.getBalance()}`)}}break;case 3:g();break;case 4:y.bold(`\nCurrent client version: ${b}\nSee https://github.com/KevinKWZheng/Fulcrum-Clients for client side download & releases\n`);break;case 5:await y.red("\nAre you sure to exit? [Y/N]\n").yesOrNo({yes:["y","Y","ENTER"],no:["n","N"]}).promise?(y("\nExiting program...\n"),y.processExit(0),await o(2e3)):y.red.bold("\nOperation canceled")}y.inverse("\n\nPress any key to exit"),y.once("key",(async()=>{g(),y.moveTo(1,1);const e=v.getCurrConversation();if(e&&e.length){await I.download([e]);const t=await I.get(e);for(const e in t.messages){const s=t.messages[e];await D(s.username,s.content,{timestamp:s.timestamp})}}S=x=!1,y("\n").saveCursor(),T()}))}}))}()}));let s="",i="",r=!1;if(e.existsSync(".cache/cred")&&(y("\nUse previously saved account? [Y/N]"),r=await y.yesOrNo({yes:["y","Y","ENTER"],no:["n","N","ESC"]}).promise,r)){const e=await a.readFile(".cache/cred","utf-8"),t=JSON.parse(e);s=t.username,i=t.pw,await v.login(s,i)}for(;!v.isLoggedIn();){y.saveCursor().eraseDisplayBelow();const e=await y.singleColumnMenu(["Login","Register"],{cancelable:!0}).promise;if(e.canceled&&(y.bold.red("\nLogin interrupted, exiting...\n"),y.processExit(0),await o(2e3),process.exit(0)),y("\n"),0==e.selectedIndex){y("Log in process initiated.\n"),y("\nUsername: "),s=await y.inputField().promise,y("\nPassword: "),i=await y.inputField({echoChar:"*"}).promise;const e=await v.login(s,i);if(e.status)break;y.red(`Log in failed: ${e.errMsg}`)}else{y.bold("Registration process initiated.\n"),y("\nUsername: "),s=await y.inputField().promise,y("\nEmail: ");const e=await y.inputField().promise;y("\nPassword: "),i=await y.inputField({echoChar:"*"}).promise,y("\nInvitation Code: ");const t=await y.inputField().promise,n=await v.register(s,i,e,t);if(n.status)break;y.red(`\nRegistration failed: ${n.errMsg}`)}await o(2e3),y.restoreCursor().eraseDisplayBelow()}if(C.setCredentials(s,i),I.setCredentials(s,i),$.setCredentials(s,i),g(),!r){y.bold("\nRemember this account? [Y/N]");const e=await y.yesOrNo({yes:["y","Y","ENTER"],no:["n","N","ESC"]}).promise;y("\n"),e&&(await a.writeFile(".cache/cred",JSON.stringify({username:s,pw:i}),"utf-8"),y.green("Log in credentials saved\n"))}await v.sync(),await C.download(v.listAssistantIds()),await I.download(v.listConversationIds()),await $.download(v.listInvoiceIds()),e.existsSync("downloads")||e.mkdirSync("downloads"),v.setCurrAssistant(C.getId("GPT-4")),y.green.bold("Log in success!\n"),y("Welcome to Fulcrum AI\nType message directly to chat with AI Assistants\n"),y("Press CTRL_L to see Menu, Settings, and current announcement\n\n"),y.bold(`***Latest announcement from server***\n${await u()}\n\n`),T()}function T(){x||S||(x=!0,y.saveCursor(),y.bold(">>"),y.inputField({},(async(e,t)=>{if(S||!t)return x=!1,void T();if(e)return y.red.bold(`\nAn error occurred: ${e}\n`).saveCursor(),await o(3e3),x=!1,void T();y.restoreCursor().eraseLine().eraseDisplayBelow(),S=!0,await D(v.getUsername(),t);const s=await y.spinner("unboxing-color"),n=await v.sendMessage(t);if(!n.status||!n.content)return y.red.bold(`\nAn error occurred: ${e}\n`).saveCursor(),x=!1,void T();s.animate(!1),y.eraseLine().move(-1,0),await D(C.getName(n.content.assistantId),n.content.message,{slowTyping:!0}),await v.sync(),v.setCurrConversation(n.content.conversationId),S=!1,y("\n"),x=!1,T()})))}new Promise((e=>{N().then((()=>e()))})).then((()=>{}));
//# sourceMappingURL=Client.js.map
